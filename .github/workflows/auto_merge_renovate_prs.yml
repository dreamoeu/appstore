name: Auto merge Renovate PRs

on:
  schedule:
    - cron: "*/10 * * * *" # ÊØè 10 ÂàÜÈíüË∑ë‰∏ÄÊ¨°
  workflow_dispatch:       # ÊîØÊåÅÊâãÂä®Ëß¶Âèë
  pull_request:
    types: [ready_for_review]

jobs:
  automerge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: List open PRs from Renovate
        id: list
        run: |
          prs=$(gh pr list \
            --repo ${{ github.repository }} \
            --state open \
            --json number,title,author \
            --jq '.[] | select(.author.login | test("renovate";"i")) | .number')
          echo "Found PRs: $prs"
          echo "prs=$prs" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Process each PR
        if: env.prs != ''
        run: |
          for pr in $prs; do
            echo "=== Processing PR #$pr ==="

            body=$(gh pr view $pr --repo ${{ github.repository }} --json body --jq .body)
            update_type=$(echo "$body" | grep -Eo '\|\s+[a-zA-Z0-9/_-]+\s+\|\s+(major|minor|patch)\s+\|' | head -n1 | awk -F'|' '{print $3}' | xargs)
            echo "Detected update_type='$update_type'"

            if [[ "$update_type" != "patch" && "$update_type" != "minor" ]]; then
              echo "Skipping PR #$pr (not patch/minor)"
              continue
            fi

            sha=$(gh pr view $pr --repo ${{ github.repository }} --json headRefOid --jq .headRefOid)
            echo "PR #$pr head SHA: $sha"

            # ÊúÄÂ§öÁ≠â 30 ÂàÜÈíüÔºà30 Ê¨° * 60 ÁßíÔºâ
            for i in {1..30}; do
              echo "üîé Check attempt $i for PR #$pr ..."

              # Ëé∑Âèñ combined Áä∂ÊÄÅ
              state=$(gh api repos/${{ github.repository }}/commits/$sha/status --jq .state)
              echo "Combined status = $state"

              # Ëé∑ÂèñËØ¶ÁªÜ check-runs
              echo "---- Check runs for $sha ----"
              gh api repos/${{ github.repository }}/commits/$sha/check-runs \
                --jq '.check_runs[] | {name: .name, status: .status, conclusion: .conclusion}' || true
              echo "--------------------------------"

              if [[ "$state" == "success" ]]; then
                echo "‚úÖ All checks passed for PR #$pr. Merging..."
                gh pr merge $pr \
                  --squash \
                  --delete-branch \
                  --repo ${{ github.repository }}
                break
              elif [[ "$state" == "failure" ]]; then
                echo "‚ùå Checks failed for PR #$pr. Skipping."
                break
              else
                echo "‚è≥ Still pending checks for PR #$pr. Waiting 60s..."
                sleep 60
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
