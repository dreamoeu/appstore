networks:
  milvus:
    driver: bridge
  opensearch-net:
    driver: bridge
    internal: true
  ssrf_proxy_network:
    driver: bridge
    internal: true
services:
  api:
    container_name: api-dify
    depends_on:
    - db
    - redis
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      MODE: api
      SENTRY_DSN: ${API_SENTRY_DSN:-}
      SENTRY_PROFILES_SAMPLE_RATE: ${API_SENTRY_PROFILES_SAMPLE_RATE:-1.0}
      SENTRY_TRACES_SAMPLE_RATE: ${API_SENTRY_TRACES_SAMPLE_RATE:-1.0}
    image: langgenius/dify-api:0.15.3
    networks:
    - ssrf_proxy_network
    - default
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/app/storage:/app/api/storage
  certbot:
    command:
    - tail
    - -f
    - /dev/null
    container_name: certbot-dify
    entrypoint:
    - /docker-entrypoint.sh
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
    - CERTBOT_EMAIL=${CERTBOT_EMAIL}
    - CERTBOT_DOMAIN=${CERTBOT_DOMAIN}
    - CERTBOT_OPTIONS=${CERTBOT_OPTIONS:-}
    image: certbot/certbot
    profiles:
    - certbot
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/certbot/conf:/etc/letsencrypt
    - ${DIFY_ROOT_PATH}/volumes/certbot/www:/var/www/html
    - ${DIFY_ROOT_PATH}/volumes/certbot/logs:/var/log/letsencrypt
    - ${DIFY_ROOT_PATH}/volumes/certbot/conf/live:/etc/letsencrypt/live
    - ${DIFY_ROOT_PATH}/certbot/update-cert.template.txt:/update-cert.template.txt
    - ${DIFY_ROOT_PATH}/certbot/docker-entrypoint.sh:/docker-entrypoint.sh
  chroma:
    container_name: chroma-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      CHROMA_SERVER_AUTHN_CREDENTIALS: ${CHROMA_SERVER_AUTHN_CREDENTIALS:-difyai123456}
      CHROMA_SERVER_AUTHN_PROVIDER: ${CHROMA_SERVER_AUTHN_PROVIDER:-chromadb.auth.token_authn.TokenAuthenticationServerProvider}
      IS_PERSISTENT: ${CHROMA_IS_PERSISTENT:-TRUE}
    image: ghcr.io/chroma-core/chroma:0.5.20
    profiles:
    - chroma
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/chroma:/chroma/chroma
  couchbase-server:
    build: ./couchbase-server
    command: sh -c "/opt/couchbase/init/init-cbserver.sh"
    container_name: couchbase-server-dify
    entrypoint:
    - ''
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
    - CLUSTER_NAME=dify_search
    - COUCHBASE_ADMINISTRATOR_USERNAME=${COUCHBASE_USER:-Administrator}
    - COUCHBASE_ADMINISTRATOR_PASSWORD=${COUCHBASE_PASSWORD:-password}
    - COUCHBASE_BUCKET=${COUCHBASE_BUCKET_NAME:-Embeddings}
    - COUCHBASE_BUCKET_RAMSIZE=512
    - COUCHBASE_RAM_SIZE=2048
    - COUCHBASE_EVENTING_RAM_SIZE=512
    - COUCHBASE_INDEX_RAM_SIZE=512
    - COUCHBASE_FTS_RAM_SIZE=1024
    healthcheck:
      interval: 10s
      retries: 10
      start_period: 30s
      test:
      - CMD-SHELL
      - curl -s -f -u Administrator:password http://localhost:8091/pools/default/buckets
        | grep -q '\[{' || exit 1
      timeout: 10s
    hostname: couchbase-server
    profiles:
    - couchbase
    restart: always
    stdin_open: true
    tty: true
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/couchbase/data:/opt/couchbase/var/lib/couchbase/data
    working_dir: /opt/couchbase
  db:
    command: "postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-100}'\n   \
      \      -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}'\n         -c 'work_mem=${POSTGRES_WORK_MEM:-4MB}'\n\
      \         -c 'maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}'\n\
      \         -c 'effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB}'\n"
    container_name: db-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
      PGUSER: ${PGUSER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-dify}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456}
    healthcheck:
      interval: 1s
      retries: 30
      test:
      - CMD
      - pg_isready
      timeout: 3s
    image: postgres:15-alpine
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/db/data:/var/lib/postgresql/data
  elasticsearch:
    container_name: elasticsearch-dify
    deploy:
      resources:
        limits:
          memory: 2g
    entrypoint:
    - sh
    - -c
    - sh /docker-entrypoint-mount.sh
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD:-elastic}
      VECTOR_STORE: ${VECTOR_STORE:-}
      cluster.name: dify-es-cluster
      discovery.type: single-node
      node.name: dify-es0
      xpack.license.self_generated.type: basic
      xpack.security.enabled: 'true'
      xpack.security.enrollment.enabled: 'false'
      xpack.security.http.ssl.enabled: 'false'
    healthcheck:
      interval: 30s
      retries: 50
      test:
      - CMD
      - curl
      - -s
      - http://localhost:9200/_cluster/health?pretty
      timeout: 10s
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.2
    ports:
    - ${ELASTICSEARCH_PORT:-9200}:9200
    profiles:
    - elasticsearch
    - elasticsearch-ja
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/elasticsearch/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    - dify_es01_data:/usr/share/elasticsearch/data
  etcd:
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls
      http://0.0.0.0:2379 --data-dir /etcd
    container_name: milvus-etcd-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      ETCD_AUTO_COMPACTION_MODE: ${ETCD_AUTO_COMPACTION_MODE:-revision}
      ETCD_AUTO_COMPACTION_RETENTION: ${ETCD_AUTO_COMPACTION_RETENTION:-1000}
      ETCD_QUOTA_BACKEND_BYTES: ${ETCD_QUOTA_BACKEND_BYTES:-4294967296}
      ETCD_SNAPSHOT_COUNT: ${ETCD_SNAPSHOT_COUNT:-50000}
    healthcheck:
      interval: 30s
      retries: 3
      test:
      - CMD
      - etcdctl
      - endpoint
      - health
      timeout: 20s
    image: quay.io/coreos/etcd:v3.5.18
    networks:
    - milvus
    profiles:
    - milvus
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/milvus/etcd:/etcd
  kibana:
    container_name: kibana-dify
    depends_on:
    - elasticsearch
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      I18N_LOCALE: zh-CN
      NO_PROXY: localhost,127.0.0.1,elasticsearch,kibana
      SERVER_PORT: '5601'
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: d1a66dfd-c4d3-4a0a-8290-2abcb83ab3aa
      XPACK_FLEET_ISAIRGAPPED: 'true'
      XPACK_SECURITY_ENABLED: 'true'
      XPACK_SECURITY_ENROLLMENT_ENABLED: 'false'
      XPACK_SECURITY_HTTP_SSL_ENABLED: 'false'
    healthcheck:
      interval: 30s
      retries: 3
      test:
      - CMD-SHELL
      - curl -s http://localhost:5601 >/dev/null || exit 1
      timeout: 10s
    image: docker.elastic.co/kibana/kibana:8.14.3
    ports:
    - ${KIBANA_PORT:-5601}:5601
    profiles:
    - elasticsearch
    restart: always
  milvus-standalone:
    command:
    - milvus
    - run
    - standalone
    container_name: milvus-standalone-dify
    depends_on:
    - etcd
    - minio
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      ETCD_ENDPOINTS: ${ETCD_ENDPOINTS:-etcd:2379}
      MINIO_ADDRESS: ${MINIO_ADDRESS:-minio:9000}
      common.security.authorizationEnabled: ${MILVUS_AUTHORIZATION_ENABLED:-true}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 90s
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9091/healthz
      timeout: 20s
    image: milvusdb/milvus:v2.5.0-beta
    networks:
    - milvus
    ports:
    - 19530:19530
    - 9091:9091
    profiles:
    - milvus
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/milvus/milvus:/var/lib/milvus
  minio:
    command: minio server /minio_data --console-address ":9001"
    container_name: milvus-minio-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
    healthcheck:
      interval: 30s
      retries: 3
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9000/minio/health/live
      timeout: 20s
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    networks:
    - milvus
    profiles:
    - milvus
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/milvus/minio:/minio_data
  myscale:
    container_name: myscale-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    image: myscale/myscaledb:1.6.4
    ports:
    - ${MYSCALE_PORT:-8123}:${MYSCALE_PORT:-8123}
    profiles:
    - myscale
    restart: always
    tty: true
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/myscale/data:/var/lib/clickhouse
    - ${DIFY_ROOT_PATH}/volumes/myscale/log:/var/log/clickhouse-server
    - ${DIFY_ROOT_PATH}/volumes/myscale/config/users.d/custom_users_config.xml:/etc/clickhouse-server/users.d/custom_users_config.xml
  nginx:
    container_name: nginx-dify
    depends_on:
    - api
    - web
    entrypoint:
    - sh
    - -c
    - "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh\
      \ && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh"
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      CERTBOT_DOMAIN: ${CERTBOT_DOMAIN:-}
      NGINX_CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE:-15M}
      NGINX_ENABLE_CERTBOT_CHALLENGE: ${NGINX_ENABLE_CERTBOT_CHALLENGE:-false}
      NGINX_HTTPS_ENABLED: ${NGINX_HTTPS_ENABLED:-false}
      NGINX_KEEPALIVE_TIMEOUT: ${NGINX_KEEPALIVE_TIMEOUT:-65}
      NGINX_PORT: ${NGINX_PORT:-80}
      NGINX_PROXY_READ_TIMEOUT: ${NGINX_PROXY_READ_TIMEOUT:-3600s}
      NGINX_PROXY_SEND_TIMEOUT: ${NGINX_PROXY_SEND_TIMEOUT:-3600s}
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_}
      NGINX_SSL_CERT_FILENAME: ${NGINX_SSL_CERT_FILENAME:-dify.crt}
      NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME:-dify.key}
      NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}
      NGINX_SSL_PROTOCOLS: ${NGINX_SSL_PROTOCOLS:-TLSv1.1 TLSv1.2 TLSv1.3}
      NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES:-auto}
    image: nginx:latest
    ports:
    - ${PANEL_APP_PORT_HTTP:-8080}:${NGINX_PORT:-80}
    - ${PANEL_APP_PORT_HTTPS:-8443}:${NGINX_SSL_PORT:-443}
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
    - ${DIFY_ROOT_PATH}/nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
    - ${DIFY_ROOT_PATH}/nginx/https.conf.template:/etc/nginx/https.conf.template
    - ${DIFY_ROOT_PATH}/nginx/conf.d:/etc/nginx/conf.d
    - ${DIFY_ROOT_PATH}/nginx/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    - ${DIFY_ROOT_PATH}/nginx/ssl:/etc/ssl
    - ${DIFY_ROOT_PATH}/volumes/certbot/conf/live:/etc/letsencrypt/live
    - ${DIFY_ROOT_PATH}/volumes/certbot/conf:/etc/letsencrypt
    - ${DIFY_ROOT_PATH}/volumes/certbot/www:/var/www/html
  oceanbase:
    container_name: oceanbase-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      OB_CLUSTER_NAME: ${OCEANBASE_CLUSTER_NAME:-difyai}
      OB_MEMORY_LIMIT: ${OCEANBASE_MEMORY_LIMIT:-6G}
      OB_SERVER_IP: 127.0.0.1
      OB_SYS_PASSWORD: ${OCEANBASE_VECTOR_PASSWORD:-difyai123456}
      OB_TENANT_PASSWORD: ${OCEANBASE_VECTOR_PASSWORD:-difyai123456}
    image: quay.io/oceanbase/oceanbase-ce:4.3.3.0-100000142024101215
    profiles:
    - oceanbase
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/oceanbase/data:/root/ob
    - ${DIFY_ROOT_PATH}/volumes/oceanbase/conf:/root/.obd/cluster
    - ${DIFY_ROOT_PATH}/volumes/oceanbase/init.d:/root/boot/init.d
  opensearch:
    container_name: opensearch-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: ${OPENSEARCH_INITIAL_ADMIN_PASSWORD:-Qazwsxedc!@#123}
      OPENSEARCH_JAVA_OPTS: -Xms${OPENSEARCH_JAVA_OPTS_MIN:-512m} -Xmx${OPENSEARCH_JAVA_OPTS_MAX:-1024m}
      bootstrap.memory_lock: ${OPENSEARCH_BOOTSTRAP_MEMORY_LOCK:-true}
      discovery.type: ${OPENSEARCH_DISCOVERY_TYPE:-single-node}
    image: opensearchproject/opensearch:latest
    networks:
    - opensearch-net
    profiles:
    - opensearch
    ulimits:
      memlock:
        hard: ${OPENSEARCH_MEMLOCK_HARD:--1}
        soft: ${OPENSEARCH_MEMLOCK_SOFT:--1}
      nofile:
        hard: ${OPENSEARCH_NOFILE_HARD:-65536}
        soft: ${OPENSEARCH_NOFILE_SOFT:-65536}
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/opensearch/data:/usr/share/opensearch/data
  opensearch-dashboards:
    container_name: opensearch-dashboards-dify
    depends_on:
    - opensearch
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]'
    image: opensearchproject/opensearch-dashboards:latest
    networks:
    - opensearch-net
    profiles:
    - opensearch
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/opensearch/opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
  oracle:
    container_name: oracle-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      ORACLE_CHARACTERSET: ${ORACLE_CHARACTERSET:-AL32UTF8}
      ORACLE_PWD: ${ORACLE_PWD:-Dify123456}
    image: container-registry.oracle.com/database/free:latest
    profiles:
    - oracle
    restart: always
    volumes:
    - source: oradata
      target: /opt/oracle/oradata
      type: volume
    - ${DIFY_ROOT_PATH}/startupscripts:/opt/oracle/scripts/startup
  pgvecto-rs:
    container_name: pgvecto-rs-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      PGDATA: ${PGVECTOR_PGDATA:-/var/lib/postgresql/data/pgdata}
      PGUSER: ${PGVECTOR_PGUSER:-postgres}
      POSTGRES_DB: ${PGVECTOR_POSTGRES_DB:-dify}
      POSTGRES_PASSWORD: ${PGVECTOR_POSTGRES_PASSWORD:-difyai123456}
    healthcheck:
      interval: 1s
      retries: 30
      test:
      - CMD
      - pg_isready
      timeout: 3s
    image: tensorchord/pgvecto-rs:pg16-v0.3.0
    profiles:
    - pgvecto-rs
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/pgvecto_rs/data:/var/lib/postgresql/data
  pgvector:
    container_name: pgvector-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      PGDATA: ${PGVECTOR_PGDATA:-/var/lib/postgresql/data/pgdata}
      PGUSER: ${PGVECTOR_PGUSER:-postgres}
      POSTGRES_DB: ${PGVECTOR_POSTGRES_DB:-dify}
      POSTGRES_PASSWORD: ${PGVECTOR_POSTGRES_PASSWORD:-difyai123456}
    healthcheck:
      interval: 1s
      retries: 30
      test:
      - CMD
      - pg_isready
      timeout: 3s
    image: pgvector/pgvector:pg16
    profiles:
    - pgvector
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/pgvector/data:/var/lib/postgresql/data
  plugin_daemon:
    container_name: plugin_daemon-dify
    environment:
      DB_DATABASE: ${DB_PLUGIN_DATABASE:-dify_plugin}
      DIFY_INNER_API_KEY: ${INNER_API_KEY_FOR_PLUGIN:-QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1}
      DIFY_INNER_API_URL: ${PLUGIN_DIFY_INNER_API_URL:-http://api:5001}
      FORCE_VERIFYING_SIGNATURE: ${FORCE_VERIFYING_SIGNATURE:-true}
      MAX_PLUGIN_PACKAGE_SIZE: ${PLUGIN_MAX_PACKAGE_SIZE:-52428800}
      PLUGIN_REMOTE_INSTALLING_HOST: ${PLUGIN_REMOTE_INSTALL_HOST:-0.0.0.0}
      PLUGIN_REMOTE_INSTALLING_PORT: ${PLUGIN_REMOTE_INSTALL_PORT:-5003}
      PLUGIN_WORKING_PATH: ${PLUGIN_WORKING_PATH:-/app/storage/cwd}
      PPROF_ENABLED: ${PLUGIN_PPROF_ENABLED:-false}
      SERVER_KEY: ${PLUGIN_DAEMON_KEY:-lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi}
      SERVER_PORT: ${PLUGIN_DAEMON_PORT:-5002}
    image: langgenius/dify-plugin-daemon:0.0.1-local
    ports:
    - ${EXPOSE_PLUGIN_DEBUGGING_PORT:-5003}:${PLUGIN_DEBUGGING_PORT:-5003}
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/plugin_daemon:/app/storage
  qdrant:
    container_name: qdrant-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}
    image: langgenius/qdrant:v1.7.3
    profiles:
    - qdrant
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/qdrant:/qdrant/storage
  redis:
    command: redis-server --requirepass ${REDIS_PASSWORD:-difyai123456}
    container_name: redis-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD:-difyai123456}
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
    image: redis:6-alpine
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/redis/data:/data
  sandbox:
    container_name: sandbox-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      API_KEY: ${SANDBOX_API_KEY:-dify-sandbox}
      ENABLE_NETWORK: ${SANDBOX_ENABLE_NETWORK:-true}
      GIN_MODE: ${SANDBOX_GIN_MODE:-release}
      HTTPS_PROXY: ${SANDBOX_HTTPS_PROXY:-http://ssrf_proxy:3128}
      HTTP_PROXY: ${SANDBOX_HTTP_PROXY:-http://ssrf_proxy:3128}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
      WORKER_TIMEOUT: ${SANDBOX_WORKER_TIMEOUT:-15}
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8194/health
    image: langgenius/dify-sandbox:0.2.10
    networks:
    - ssrf_proxy_network
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/sandbox/dependencies:/dependencies
  ssrf_proxy:
    container_name: ssrf_proxy-dify
    entrypoint:
    - sh
    - -c
    - "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh\
      \ && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh"
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      COREDUMP_DIR: ${SSRF_COREDUMP_DIR:-/var/spool/squid}
      HTTP_PORT: ${SSRF_HTTP_PORT:-3128}
      REVERSE_PROXY_PORT: ${SSRF_REVERSE_PROXY_PORT:-8194}
      SANDBOX_HOST: ${SSRF_SANDBOX_HOST:-sandbox}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    image: ubuntu/squid:latest
    networks:
    - ssrf_proxy_network
    - default
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
    - ${DIFY_ROOT_PATH}/ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint-mount.sh
  unstructured:
    container_name: unstructured-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    image: downloads.unstructured.io/unstructured-io/unstructured-api:latest
    profiles:
    - unstructured
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/unstructured:/app/data
  weaviate:
    container_name: weaviate-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-false}
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: ${WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
      AUTHENTICATION_APIKEY_ENABLED: ${WEAVIATE_AUTHENTICATION_APIKEY_ENABLED:-true}
      AUTHENTICATION_APIKEY_USERS: ${WEAVIATE_AUTHENTICATION_APIKEY_USERS:-hello@dify.ai}
      AUTHORIZATION_ADMINLIST_ENABLED: ${WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED:-true}
      AUTHORIZATION_ADMINLIST_USERS: ${WEAVIATE_AUTHORIZATION_ADMINLIST_USERS:-hello@dify.ai}
      CLUSTER_HOSTNAME: ${WEAVIATE_CLUSTER_HOSTNAME:-node1}
      DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_DEFAULT_VECTORIZER_MODULE:-none}
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25}
    image: semitechnologies/weaviate:1.19.0
    profiles:
    - ''
    - weaviate
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/weaviate:/var/lib/weaviate
  web:
    container_name: web-dify
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      APP_API_URL: ${APP_API_URL:-}
      CONSOLE_API_URL: ${CONSOLE_API_URL:-}
      CSP_WHITELIST: ${CSP_WHITELIST:-}
      INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH: ${INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH:-}
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED:-0}
      SENTRY_DSN: ${WEB_SENTRY_DSN:-}
      TEXT_GENERATION_TIMEOUT_MS: ${TEXT_GENERATION_TIMEOUT_MS:-60000}
      TOP_K_MAX_VALUE: ${TOP_K_MAX_VALUE:-}
    image: langgenius/dify-web:0.15.3
    restart: always
  worker:
    container_name: worker-dify
    depends_on:
    - db
    - redis
    env_file:
    - ./envs/global.env
    - ./envs/dify.env
    - .env
    environment:
      MODE: worker
      SENTRY_DSN: ${API_SENTRY_DSN:-}
      SENTRY_PROFILES_SAMPLE_RATE: ${API_SENTRY_PROFILES_SAMPLE_RATE:-1.0}
      SENTRY_TRACES_SAMPLE_RATE: ${API_SENTRY_TRACES_SAMPLE_RATE:-1.0}
    image: langgenius/dify-api:0.15.3
    networks:
    - ssrf_proxy_network
    - default
    restart: always
    volumes:
    - ${DIFY_ROOT_PATH}/volumes/app/storage:/app/api/storage
volumes:
  dify_es01_data: null
  oradata: null
